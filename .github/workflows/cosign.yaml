name: Image Cosign Example
on:
  push:
    branches:
      - main  
jobs:
  cosign:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write # needed for signing the images with GitHub OIDC Token

    name: build-image
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Chainctl
        uses: chainguard-dev/setup-chainctl@main
        with:
          identity: "b8130cfde995dab4bb2f2b8e104417ab3632edd3/27833b8844898552"
          
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        
      - name: Install Syft
        uses: anchore/sbom-action@v0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/jasonbishay/cosign
          tags: type=sha,format=long

      # Dynamically extract the base image from your Dockerfile
      - name: Extract Base Image from Dockerfile
        id: base-image
        run: |
          IMAGE=$(grep -m 1 '^FROM' Dockerfile | awk '{print $2}')
          if [ -z "$IMAGE" ]; then
            echo "‚ùå No FROM line found in Dockerfile!"
            exit 1
          fi
          echo "‚úÖ Base image found: $IMAGE"
          echo "base_image=$IMAGE" >> $GITHUB_OUTPUT

      # Verify the Chainguard base image signature before using it
      - name: Verify Signature from CGR Registry
        run: |
          IMAGE="${{ steps.base-image.outputs.base_image }}"
          echo "üîç Verifying base image: $IMAGE"
          cosign verify \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com \
            --certificate-identity=https://github.com/chainguard-images/images/.github/workflows/release.yaml@refs/heads/main \
            "$IMAGE"
      
      - name: Build and Push container images
        uses: docker/build-push-action@v6.14.0
        id: build-and-push
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/jasonbishay/cosign/cosign-example:latest
          #tags: cosign-example:latest #${{ steps.docker_meta.outputs.tags }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        id: generate-sbom
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          image: ghcr.io/jasonbishay/cosign/cosign-example:latest
          output-file: /tmp/workflow-sbom.spdx.json

      # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
      # Sign using an externally generated key
      - name: Sign image with Cosign Using Provided Key
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
          cosign attest --yes --type spdxjson --key env://COSIGN_PRIVATE_KEY --predicate /tmp/workflow-sbom.spdx.json ${images}
        env:
          TAGS: ${{ steps.docker_meta.outputs.tags }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          SBOM: ${{ steps.generate-sbom.outputs.cmd }}
      # Sign using GitHub easier setup, but embeds a bunch of information into the certificate that ends up in the rekor logs that some may not like.:
      - name: Sign the images using GitHub Key
        env:
           DIGEST: ${{ steps.build-and-push.outputs.digest }}
           TAGS: ${{ steps.docker_meta.outputs.tags }}
        run: |
           images=""
           for tag in ${TAGS}; do
             images+="${tag}@${DIGEST} "
           done
           cosign sign --yes ${images}
           cosign attest --yes --type spdxjson --predicate /tmp/workflow-sbom.spdx.json ${images}

      - name: Attest
        uses: actions/attest-sbom@v2
        id: attest
        with:
          subject-name: ghcr.io/jasonbishay/cosign/cosign-example
          subject-digest: ${{ steps.build-and-push.outputs.digest }}
          sbom-path: '/tmp/workflow-sbom.spdx.json'
          push-to-registry: true
